generator client {
  provider   = "prisma-client"
  output     = "../src/generated/prisma"
  engineType = "client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id        String   @id @default(dbgenerated("uuid_generate_v7()")) @map("id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  // Domain-Specific Fields.
  name             String @map("name") @db.VarChar(255)
  email            String @unique @map("email")
  googleProviderId String @unique @map("google_provider_id")
  avatarURL        String @map("avatar_url")

  // Relations.
  learningJourneys LearningJourney[]
  threads          Thread[]
  sentiments       LearningUnitSentiments[]

  @@map("users")
}

model Collection {
  id        String   @id @default(dbgenerated("uuid_generate_v7()")) @map("id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  // Domain-Specific Fields.
  title       String         @map("title")
  description String         @map("description")
  type        CollectionType @map("type")

  // Relations.
  learningUnit LearningUnit[]

  @@map("collections")
}

enum CollectionType {
  AI
  BOB
  CAREER
  INNOV
  NEWS
  PROD
  STU_DEV
  STU_WELL
  WELLBEING
}

model LearningUnit {
  id        String   @id @default(dbgenerated("uuid_generate_v7()")) @map("id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  // Domain-Specific Fields.
  title         String      @map("title")
  contentType   ContentType @map("content_type")
  contentURL    String      @map("content_url")
  summary       String      @map("summary")
  objectives    String      @map("objectives")
  createdBy     String      @map("created_by")
  isRecommended Boolean     @default(false) @map("is_recommended")

  // Relations.
  collectionId String @map("collection_id") @db.Uuid

  collection       Collection               @relation(fields: [collectionId], references: [id])
  sentiments       LearningUnitSentiments[]
  tags             LearningUnitTag[]
  learningJourneys LearningJourney[]
  questionAnswers  QuestionAnswer[]
  sources          LearningUnitSources[]

  @@map("learning_units")
}

model LearningUnitSentiments {
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  // Domain-Specific Fields.
  hasLiked Boolean @map("has_liked")

  // Relations.
  userId         String @map("user_id") @db.Uuid
  learningUnitId String @map("learning_unit_id") @db.Uuid

  user         User         @relation(fields: [userId], references: [id])
  learningUnit LearningUnit @relation(fields: [learningUnitId], references: [id])

  @@unique([userId, learningUnitId])
  @@map("learning_unit_sentiments")
}

model LearningUnitSources {
  id        String   @id @default(dbgenerated("uuid_generate_v7()")) @map("id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  // Domain-Specific Fields.
  title     String @map("title")
  sourceURL String @map("source_url")

  // Relations.
  learningUnitId String @map("learning_unit_id") @db.Uuid

  learningUnit LearningUnit             @relation(fields: [learningUnitId], references: [id])
  tags         LearningUnitSourcesTag[]

  @@map("learning_unit_sources")
}

enum ContentType {
  PODCAST
}

model LearningJourney {
  id        String   @id @default(dbgenerated("uuid_generate_v7()")) @map("id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  // Domain-Specific Fields.
  isCompleted    Boolean @default(false) @map("is_completed")
  lastCheckpoint Decimal @map("last_checkpoint")

  // Relations.
  userId         String @map("user_id") @db.Uuid
  learningUnitId String @map("learning_unit_id") @db.Uuid

  user         User         @relation(fields: [userId], references: [id])
  learningUnit LearningUnit @relation(fields: [learningUnitId], references: [id])

  @@unique([userId, learningUnitId])
  @@map("learning_journeys")
}

model Tag {
  id        String   @id @default(dbgenerated("uuid_generate_v7()")) @map("id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  // Domain-Specific Fields.
  code  String @unique @map("code") @db.VarChar(32) // e.g. "SPECIAL_EDUCATIONAL_NEEDS"
  label String @map("label") @db.VarChar(100) // e.g. "Special Educational Needs"

  // Relations.
  learningUnits       LearningUnitTag[]
  LearningUnitSources LearningUnitSourcesTag[]

  @@map("tags")
}

model LearningUnitTag {
  // Relations.
  learningUnitId String @map("learning_unit_id") @db.Uuid
  tagId          String @map("tag_id") @db.Uuid

  learningUnit LearningUnit @relation(fields: [learningUnitId], references: [id], onDelete: Cascade)
  tag          Tag          @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([learningUnitId, tagId])
  @@map("learning_unit_tags")
}

model LearningUnitSourcesTag {
  // Relations.
  learningUnitSourceId String @map("learning_unit_source_id") @db.Uuid
  tagId                String @map("tag_id") @db.Uuid

  learningUnitSource LearningUnitSources @relation(fields: [learningUnitSourceId], references: [id], onDelete: Cascade)
  tag                Tag                 @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([learningUnitSourceId, tagId])
  @@map("learning_unit_sources_tags")
}

model Thread {
  id        String   @id @default(dbgenerated("uuid_generate_v7()")) @map("id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  // Domain-Specific Fields.
  isActive Boolean @default(false) @map("is_active")

  // Relations.
  userId String @map("user_id") @db.Uuid

  user User @relation(fields: [userId], references: [id])

  messages Message[]

  @@map("threads")
}

model Message {
  id        String   @id @default(dbgenerated("uuid_generate_v7()")) @map("id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  // Domain-Specific Fields.
  content String @map("content")
  role    Role   @map("role")

  // Relations.
  threadId String @map("thread_id") @db.Uuid

  thread Thread @relation(fields: [threadId], references: [id])

  @@map("messages")
}

enum Role {
  USER
  ASSISTANT
}

model QuestionAnswer {
  id        String   @id @default(dbgenerated("uuid_generate_v7()")) @map("id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  // Domain-Specific Fields.
  question    String   @map("question")
  options     String[] @default([]) @map("options")
  answer      Int      @map("answer") @db.SmallInt
  explanation String   @map("explanation")
  order       Int      @map("order") @db.SmallInt

  // Relations.
  learningUnitId String @map("learning_unit_id") @db.Uuid

  learningUnit LearningUnit @relation(fields: [learningUnitId], references: [id])

  @@map("question_answers")
}
