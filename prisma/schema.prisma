generator learner {
  provider = "prisma-client"
  output   = "../apps/learner/src/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id        BigInt   @id @default(autoincrement()) @map("id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  // Domain-Specific Fields.
  name             String @map("name") @db.VarChar(255)
  email            String @unique @map("email")
  googleProviderId String @unique @map("google_provider_id")

  // Relations.
  collections      Collection[]
  learningJourneys LearningJourney[]
  threads          Thread[]

  @@map("users")
}

model Collection {
  id        BigInt   @id @default(autoincrement()) @map("id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  // Domain-Specific Fields.
  kind  String @map("kind") @db.VarChar(255)
  title String @map("title")

  // Relations.
  userId BigInt @map("user_id")

  user User @relation(fields: [userId], references: [id])

  learningJourneys LearningJourney[]

  @@map("collections")
}

model MultiLearningUnit {
  id        BigInt   @id @default(autoincrement()) @map("id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  // Domain-Specific Fields.
  title        String   @map("title")
  collection   String   @map("collection") @db.VarChar(255)
  tags         String[] @default([]) @map("tags") @db.VarChar(255)
  content_type String   @map("content_type") @db.VarChar(255)
  content_url  String   @map("content_url")

  // Relations.
  learningJourneys LearningJourney[]
  questionAnswers  QuestionAnswer[]

  @@map("multi_learning_units")
}

model LearningJourney {
  id        BigInt   @id @default(autoincrement()) @map("id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  // Domain-Specific Fields.
  is_completed    Boolean @default(false) @map("is_completed")
  last_checkpoint Decimal @map("last_checkpoint")

  // Relations.
  userId              BigInt @map("user_id")
  multiLearningUnitId BigInt @map("multi_learning_units_id")
  collectionId        BigInt @map("collection_id")

  user              User              @relation(fields: [userId], references: [id])
  multiLearningUnit MultiLearningUnit @relation(fields: [multiLearningUnitId], references: [id])
  collection        Collection        @relation(fields: [collectionId], references: [id])

  @@map("learning_journeys")
}

model Thread {
  id        BigInt   @id @default(autoincrement()) @map("id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  // Domain-Specific Fields.
  isActive Boolean @default(false) @map("is_active")

  // Relations.
  userId BigInt @map("user_id")

  user User @relation(fields: [userId], references: [id])

  messages Message[]

  @@map("threads")
}

model Message {
  id        BigInt   @id @default(autoincrement()) @map("id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  // Domain-Specific Fields.
  content String @map("content")
  role    Role   @map("role")

  // Relations.
  threadId BigInt @map("thread_id")

  thread Thread @relation(fields: [threadId], references: [id])

  @@map("messages")
}

enum Role {
  USER
  ASSISTANT
}

model QuestionAnswer {
  id        BigInt   @id @default(autoincrement()) @map("id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  // Domain-Specific Fields.
  question    String   @map("question")
  options     String[] @default([]) @map("options")
  answer      Int      @map("answer") @db.SmallInt
  explanation String   @map("explanation")
  order       Int      @map("order") @db.SmallInt

  // Relations.
  multiLearningUnitId BigInt @map("multi_learning_units_id")

  multiLearningUnit MultiLearningUnit @relation(fields: [multiLearningUnitId], references: [id])

  @@map("question_answers")
}
